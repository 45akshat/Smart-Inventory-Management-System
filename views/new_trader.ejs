<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="navbar.css">
  <title>Save Data with Metamask</title>
  <!-- <link rel="stylesheet" href="style.css"> -->
</head>
<style>
    .container {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
}

input[type="text"], button {
  display: block;
  margin-bottom: 10px;
}

button {
  padding: 10px 20px;
  background-color: #3498db;
  color: white;
  border: none;
  cursor: pointer;
}
h1{
  color: black;
}

input{
  padding: 10px;
  border: 1px solid black;
  margin: 10px;
  margin-left: 0;
}

</style>
<body>
  <div class="container">
    <h1>New Trader</h1>

    <input type="text" id="productName" placeholder="Enter Product Name">
    <input type="text" id="productCategory" placeholder="Enter Product Category">
    <input type="number" id="totalStock" placeholder="Enter Total Stock Available">
    <input type="number" id="priceInGems" placeholder="Enter Price in Gems">
        
    <button type="button" onclick="saveProductData()">Save Product Data</button>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/web3@4.5.0/dist/web3.min.js"></script>

  <script>
    async function saveProductData() {
      if (typeof window.ethereum !== 'undefined') {
        try {
          const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
          const sender = accounts[0];

          const contractAddress = '0xe7559f74E37F48DfAF5f04313844D786bd385D28';
          const contractAbi = [
            {
              "inputs": [],
              "name": "user",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function",
              "constant": true
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_name",
                  "type": "string"
                }
              ],
              "name": "setItem",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ];

          const contract = new window.web3.eth.Contract(contractAbi, contractAddress);

          const productName = document.getElementById('productName').value;
          const productCategory = document.getElementById('productCategory').value;
          const totalStock = document.getElementById('totalStock').value;
          const priceInGems = document.getElementById('priceInGems').value;

          const dataObject = {
            productName: productName,
            productCategory: productCategory,
            totalStock: totalStock,
            priceInGems: priceInGems
          };

          const strDataObj = JSON.stringify(dataObject);

          const result = await contract.methods.setItem(strDataObj).send({ from: sender });
          console.log('Transaction Hash:', result.transactionHash);
          
          alert('Product data saved successfully!');

          console.log('Product Data:', JSON.stringify(dataObject));
        } catch (error) {
          console.error('Error occurred:', error);
        }
      } else {
        alert('MetaMask not found. Please install MetaMask extension.');
      }
    }

    async function login() {
      if (typeof window.ethereum !== 'undefined') {
        try {
          const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
          console.log('MetaMask account address:', accounts[0]);
          localStorage.setItem("metaAddr", accounts[0] )
        } catch (error) {
          if (error.code === 4001) {
            console.log('User rejected MetaMask request');
          } else {
            console.error('Error occurred:', error);
          }
        }
      } else {
        alert('MetaMask not found. Please install MetaMask extension.');
      }
    }

    login();
  </script>

<div id="google_translate_element"></div>

<script type="text/javascript">
function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');
}
</script>

<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

</body>
</html>
